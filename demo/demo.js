(()=>{"use strict";var e={497:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.encode83=t.decode83=void 0;var r=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","#","$","%","*","+",",","-",".",":",";","=","?","@","[","]","^","_","{","|","}","~"];t.decode83=function(e){for(var t=0,n=0;n<e.length;n++){var o=e[n];t=83*t+r.indexOf(o)}return t},t.encode83=function(e,t){for(var n="",o=1;o<=t;o++){var a=Math.floor(e)/Math.pow(83,t-o)%83;n+=r[Math.floor(a)]}return n}},647:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isBlurhashValid=void 0;var n=r(497),o=r(593),a=r(443),i=function(e){if(!e||e.length<6)throw new a.ValidationError("The blurhash string must be at least 6 characters");var t=(0,n.decode83)(e[0]),r=Math.floor(t/9)+1,o=t%9+1;if(e.length!==4+2*o*r)throw new a.ValidationError("blurhash length mismatch: length is ".concat(e.length," but it should be ").concat(4+2*o*r))};t.isBlurhashValid=function(e){try{i(e)}catch(e){return{result:!1,errorReason:e.message}}return{result:!0}};var c=function(e){var t=e>>16,r=e>>8&255,n=255&e;return[(0,o.sRGBToLinear)(t),(0,o.sRGBToLinear)(r),(0,o.sRGBToLinear)(n)]},u=function(e,t){var r=Math.floor(e/361),n=Math.floor(e/19)%19,a=e%19;return[(0,o.signPow)((r-9)/9,2)*t,(0,o.signPow)((n-9)/9,2)*t,(0,o.signPow)((a-9)/9,2)*t]};t.default=function(e,t,r,a){i(e),a|=1;for(var s=(0,n.decode83)(e[0]),l=Math.floor(s/9)+1,h=s%9+1,f=((0,n.decode83)(e[1])+1)/166,d=new Array(h*l),v=0;v<d.length;v++)if(0===v){var m=(0,n.decode83)(e.substring(2,6));d[v]=c(m)}else m=(0,n.decode83)(e.substring(4+2*v,6+2*v)),d[v]=u(m,f*a);for(var g=4*t,M=new Uint8ClampedArray(g*r),p=0;p<r;p++)for(var w=0;w<t;w++){for(var y=0,B=0,x=0,E=0;E<l;E++)for(v=0;v<h;v++){var R=Math.cos(Math.PI*w*v/t)*Math.cos(Math.PI*p*E/r),T=d[v+E*h];y+=T[0]*R,B+=T[1]*R,x+=T[2]*R}var b=(0,o.linearTosRGB)(y),_=(0,o.linearTosRGB)(B),P=(0,o.linearTosRGB)(x);M[4*w+0+p*g]=b,M[4*w+1+p*g]=_,M[4*w+2+p*g]=P,M[4*w+3+p*g]=255}return M}},719:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(497),o=r(593),a=r(443);t.default=function(e,t,r,i,c){if(i<1||i>9||c<1||c>9)throw new a.ValidationError("BlurHash must have between 1 and 9 components");if(t*r*4!==e.length)throw new a.ValidationError("Width and height must match the pixels array");for(var u=[],s=function(n){for(var a=function(a){var i=0==a&&0==n?1:2,c=function(e,t,r,n){for(var a=0,i=0,c=0,u=4*t,s=0;s<t;s++)for(var l=4*s,h=0;h<r;h++){var f=l+h*u,d=n(s,h);a+=d*(0,o.sRGBToLinear)(e[f]),i+=d*(0,o.sRGBToLinear)(e[f+1]),c+=d*(0,o.sRGBToLinear)(e[f+2])}var v=1/(t*r);return[a*v,i*v,c*v]}(e,t,r,(function(e,o){return i*Math.cos(Math.PI*a*e/t)*Math.cos(Math.PI*n*o/r)}));u.push(c)},c=0;c<i;c++)a(c)},l=0;l<c;l++)s(l);var h,f,d=u[0],v=u.slice(1),m="",g=i-1+9*(c-1);if(m+=(0,n.encode83)(g,1),v.length>0){var M=Math.max.apply(Math,v.map((function(e){return Math.max.apply(Math,e)}))),p=Math.floor(Math.max(0,Math.min(82,Math.floor(166*M-.5))));h=(p+1)/166,m+=(0,n.encode83)(p,1)}else h=1,m+=(0,n.encode83)(0,1);return m+=(0,n.encode83)((f=d,((0,o.linearTosRGB)(f[0])<<16)+((0,o.linearTosRGB)(f[1])<<8)+(0,o.linearTosRGB)(f[2])),4),v.forEach((function(e){m+=(0,n.encode83)(function(e,t){return 19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*(0,o.signPow)(e[0]/t,.5)+9.5))))*19+19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*(0,o.signPow)(e[1]/t,.5)+9.5))))+Math.floor(Math.max(0,Math.min(18,Math.floor(9*(0,o.signPow)(e[2]/t,.5)+9.5))))}(e,h),2)})),m}},443:function(e,t){var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ValidationError=void 0;var o=function(e){function t(t){var r=e.call(this,t)||this;return r.name="ValidationError",r.message=t,r}return n(t,e),t}(Error);t.ValidationError=o},593:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.signPow=t.sign=t.linearTosRGB=t.sRGBToLinear=void 0,t.sRGBToLinear=function(e){var t=e/255;return t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},t.linearTosRGB=function(e){var t=Math.max(0,Math.min(1,e));return t<=.0031308?Math.trunc(12.92*t*255+.5):Math.trunc(255*(1.055*Math.pow(t,1/2.4)-.055)+.5)},t.sign=function(e){return e<0?-1:1},t.signPow=function(e,r){return(0,t.sign)(e)*Math.pow(Math.abs(e),r)}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,r),a.exports}(()=>{var e=r(647),t=r(719),n=document.getElementById("blurhash"),o=document.getElementById("canvas"),a=document.getElementById("original"),i=document.getElementById("fileinput"),c=document.getElementById("x"),u=document.getElementById("y"),s=document.getElementById("encode-performance"),l=document.getElementById("decode-performance");function h(){var t=n.value;if(t){var r=performance.now(),a=(0,e.default)(t,32,32);if(s.innerText="".concat(performance.now()-r," ms"),a){var i=o.getContext("2d"),c=new ImageData(a,32,32);i.putImageData(c,0,0)}}}function f(e){return Math.min(9,Math.max(1,e))}function d(){var e=i.files[0],r=f(+c.value),o=f(+u.value);if(e){var s=a.getContext("2d"),d=new Image;d.onload=function(){s.drawImage(d,0,0,a.width,a.height),URL.revokeObjectURL(d.src),setTimeout((function(){var e=s.getImageData(0,0,a.width,a.height),i=performance.now(),c=(0,t.default)(e.data,e.width,e.height,r,o);l.innerText="".concat(performance.now()-i," ms"),n.value=c,h()}),0)},d.src=URL.createObjectURL(i.files[0])}}n.addEventListener("keyup",h),i.addEventListener("change",d),c.addEventListener("change",d),u.addEventListener("change",d),h()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,